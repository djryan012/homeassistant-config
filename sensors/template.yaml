####################################################
#                      TEMPLATE                    #
####################################################

#https://home-assistant.io/components/sensor.template/
- platform: template
  sensors:
    since_last_boot_templated:
      value_template: >-
        {%- set slb = states.sensor.last_boot.state.split(' ') -%}
        {%- set count = slb | length -%}
        {%- set hms = slb[count - 1] -%}
        {%- set hms_trimmed = hms.split('.')[0] -%}
        {%- set hms_split = hms_trimmed.split(':') -%}
        {%- set hours = hms_split[0] | int -%}
        {%- if count == 3 -%}
          {{ slb[0] ~ ' ' ~ slb[1] ~ ' ' }}
        {%- endif -%}
        {%- if hours > 0 -%}
          {%- if hours == 1 -%}
            1 hour
          {%- else -%}
            {{ hours }} hours
          {%- endif -%}
        {%- endif -%}

# Google Calendar referencing my work Calendar
    my_event_offset_1:  # The value 2700 is chosen here as 6 hours (45 * 60).
      friendly_name: "Leave for Work"
      value_template: >
        {% if as_timestamp(states.calendar.disney_work_schedule.attributes.start_time) - as_timestamp( strptime(states.sensor.date_time.state, "%Y-%m-%d, %H:%M" ) ) < 2760  %}on{% else %}off{% endif %}

    my_event_offset_2:  # The value 4800 is chosen here as 6 hours (60 + 20 * 60).
      friendly_name: "Wake for Work"
      value_template: >
        {% if as_timestamp(states.calendar.disney_work_schedule.attributes.start_time) - as_timestamp( strptime(states.sensor.date_time.state, "%Y-%m-%d, %H:%M" ) ) < 4860  %}on{% else %}off{% endif %}

# Compare Temp of Main Echo to Bedroom Sensor 
    ecobee_sensor_compare_temp:
      value_template: "{{(states.sensor.echo_temperature.state | float -  states.sensor.bedroom_temperature.state | float ) | round(1) | abs }}"
      friendly_name: "Temperature Compare"
      unit_of_measurement: temperature
    ecobee_fanmode:
      value_template: "{{ state_attr('climate.echo', 'fan_mode') }}"
      friendly_name: "Fan Mode"
    ecobee_fanstate:
      value_template: "{{ state_attr('climate.echo', 'fan') }}"
      friendly_name: "Fan State"
    ecobee_operationmode:
      value_template: "{{ state_attr('climate.echo', 'hvac_mode') }}"
      friendly_name: "HVAC Mode"
    ecobee_operatingstate:
      value_template: "{{ state_attr('climate.echo', 'operation') }}"
      friendly_name: "HVAC State"
    ecobee_setpoint:
      value_template: "{{ state_attr('climate.echo', 'temperature') }}"
      friendly_name: "HVAC Setpoint"
    ecobee_preset_mode:
      value_template: "{{ state_attr('climate.echo', 'preset_mode') }}"
      friendly_name: "Preset Mode"

#Thanks to @ccostan for the code here.  Some Intresting HA stats
    sensor_count:
      friendly_name: 'Number of Sensors'
      entity_id: []
      value_template: >
        {%- set domains = ['sensor'] -%}
        {%- for domain in domains -%}
          {%- for item in states[domain] -%}
            {% if loop.first %}
              {{loop.length}}
            {% endif %}
          {%- endfor -%}
        {%- endfor -%}
    automation_count:
      friendly_name: 'Number of Automations'
      entity_id: []
      value_template: >
        {%- set domains = ['automation'] -%}
        {%- for domain in domains -%}
          {%- for item in states[domain] -%}
            {% if loop.first %}
              {{loop.length}}
            {% endif %}
          {%- endfor -%}
        {%- endfor -%}
    script_count:
      friendly_name: 'Number of Scripts'
      entity_id: []
      value_template: >
        {%- set domains = ['script'] -%}
        {%- for domain in domains -%}
          {%- for item in states[domain] -%}
            {% if loop.first %}
              {{loop.length}}
            {% endif %}
          {%- endfor -%}
        {%- endfor -%}
    switch_count:
      friendly_name: 'Number of Switches'
      entity_id: []
      value_template: >
        {%- set domains = ['switch'] -%}
        {%- for domain in domains -%}
          {%- for item in states[domain] -%}
            {% if loop.first %}
              {{loop.length}}
            {% endif %}
          {%- endfor -%}
        {%- endfor -%}
    binary_sensor_count:
      friendly_name: 'Number of Binary Sensors'
      entity_id: []
      value_template: >
        {%- set domains = ['binary_sensor'] -%}
        {%- for domain in domains -%}
          {%- for item in states[domain] -%}
            {% if loop.first %}
              {{loop.length}}
            {% endif %}
          {%- endfor -%}
        {%- endfor -%}
    lights_count:
      friendly_name: 'Number of Lights'
      entity_id: []
      value_template: >
        {%- set domains = ['light'] -%}
        {%- for domain in domains -%}
          {%- for item in states[domain] -%}
            {% if loop.first %}
              {{loop.length}}
            {% endif %}
          {%- endfor -%}
        {%- endfor -%}
    tracker_count:
      friendly_name: 'Number of Devices'
      entity_id: []
      value_template: >
        {%- set domains = ['device_tracker'] -%}
        {%- for domain in domains -%}
          {%- for item in states[domain] -%}
            {% if loop.first %}
              {{loop.length}}
            {% endif %}
          {%- endfor -%}
        {%- endfor -%}

#Solor Edge 
    solaredge_current_power_template:
      friendly_name: Solaredge Current Power in KW
      unit_of_measurement: kWh
      value_template: "{{ (states('sensor.solaredge_current_power') | float / 1000) | round(2) }}"
    solaredge_energy_today_template:
      friendly_name: Solaredge Daily Power in KW
      unit_of_measurement: kWh
      value_template: "{{ (states('sensor.solaredge_energy_today') | float / 1000) | round(2) }}"
